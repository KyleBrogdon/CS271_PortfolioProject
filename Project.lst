Microsoft (R) Macro Assembler Version 14.29.30133.0	    11/25/21 12:46:58
<CS271 Project 6: Low level I/O and macros     (Proj6_Brogdo  Page 1 - 1


				TITLE CS271 Project 6: Low level I/O and macros     (Proj6_BrogdonK.asm)

				; Author: Kyle Brogdon
				; Last Modified: 21NOV2021
				; OSU email address: ONID_ID@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 06DEC2021
				; Description: This file is provided as a template from which you may work
				;              when developing assembly projects in CS271.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prompts user for a signed 32 bit integer
				;
				; Preconditions: Irvine32 must be included, three macro parameters are required, MAXSIZE must be declared.
				;
				; Postconditions: Values of prompt, stringStorage, bytesRead all changed.
				;
				; Receives:
				;
				;				prompt				= Address of a string to prompt user for input
				;				stringStorage		= Address of a string array to store user input
				;				bytesRead			= Address of a variable to store the number of bytes the user entered
				;-----------------------------------------------------------------------------------------------

				mGetString MACRO prompt:REQ, stringStorage:REQ, bytesRead:REQ
					PUSHAD

					MOV		EDX, prompt
					CALL	writeString
					MOV		EDX, stringStorage
					MOV		ECX, MAXSIZE
					CALL	readString
					MOV		EDI, bytesRead
					MOV		[EDI], EAX

					POPAD
				ENDM

				mDisplayString MACRO
					; Print the string which is stored in a specified memory location (input parameter, by reference).
				ENDM

 = 0000000A			NUMINTS = 10										; number of ints we must collect from the user
 = 00000064			MAXSIZE = 100										; max number of characters that can fit in a 32 bit register, including a leading sign
 = 7FFFFFFF			registerUpperLimit = 2147483647						; max value that can be accepted into a signed 32 bit register
 = 80000000			registerLowerLimit = 2147483648						; (negated) minimum value that can be accepted into a signed 32 bit register

 00000000			.data
 00000000  0000000A [			signedArray			SDWORD		NUMINTS DUP (?)
	    00000000
	   ]
 00000028  00000064 [			userInputString		SBYTE		MAXSIZE DUP (?)
	    00
	   ]
 0000008C 43 6F 6D 70 75		introProgram1		BYTE		"Computer Architecture and Assembly Project 6: Low level input/output procedures and macros", 0
	   74 65 72 20 41
	   72 63 68 69 74
	   65 63 74 75 72
	   65 20 61 6E 64
	   20 41 73 73 65
	   6D 62 6C 79 20
	   50 72 6F 6A 65
	   63 74 20 36 3A
	   20 4C 6F 77 20
	   6C 65 76 65 6C
	   20 69 6E 70 75
	   74 2F 6F 75 74
	   70 75 74 20 70
	   72 6F 63 65 64
	   75 72 65 73 20
	   61 6E 64 20 6D
	   61 63 72 6F 73
	   00
 000000E7 57 72 69 74 74		introProgram2		BYTE		"Written by: Kyle Brogdon", 13, 10, 0
	   65 6E 20 62 79
	   3A 20 4B 79 6C
	   65 20 42 72 6F
	   67 64 6F 6E 0D
	   0A 00
 00000102 50 6C 65 61 73	    programRules1		BYTE		"Please enter ", 0
	   65 20 65 6E 74
	   65 72 20 00
 00000110 20 73 69 67 6E		programRules2		BYTE		" signed decimal integers. Each number must fit inside a 32 bit register.", 0
	   65 64 20 64 65
	   63 69 6D 61 6C
	   20 69 6E 74 65
	   67 65 72 73 2E
	   20 45 61 63 68
	   20 6E 75 6D 62
	   65 72 20 6D 75
	   73 74 20 66 69
	   74 20 69 6E 73
	   69 64 65 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2E 00
 00000159 41 66 74 65 72		programRules3		BYTE		"After you have finished entering the signed numbers, I will display a list of the integers, their sum, and average.", 13, 10, 0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 65
	   6E 74 65 72 69
	   6E 67 20 74 68
	   65 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   73 2C 20 49 20
	   77 69 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 61 76 65
	   72 61 67 65 2E
	   0D 0A 00
 000001CF 50 6C 65 61 73		userInputPrompt		BYTE		"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 000001EE 00000000			userInputNumeric	SDWORD		?
 000001F2 45 52 52 4F 52		errorPrompt			BYTE		"ERROR: You did not enter a signed number or the value was too large. Please try again.", 13, 10, 0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 74
	   68 65 20 76 61
	   6C 75 65 20 77
	   61 73 20 74 6F
	   6F 20 6C 61 72
	   67 65 2E 20 50
	   6C 65 61 73 65
	   20 74 72 79 20
	   61 67 61 69 6E
	   2E 0D 0A 00
 0000024B 47 6F 6F 64 62		farewell			BYTE		"Goodbye, and thanks for using this program!", 13, 10, 0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 21 0D 0A
	   00
 00000279 00000000			stringLen			DWORD		?
 0000027D 00000000			isNegative			DWORD		0
 00000281 00000000			integerCount		DWORD		0											; keeps track of number of integers in the signedArray in increments of 4 for DWORD

 00000000			.code

				;-----------------------------------------------------------------------------------------------
				; Name: main
				;
				; does things
				;
				; Preconditions: Irvine32 must be included, NUMINTS must be declared, and .data must contain all arrays/strings
				;										used by subprocedures. Array must be type BYTE.
				;
				;-----------------------------------------------------------------------------------------------

 00000000			main PROC
					; introduces the user to the program, the programmer, and the rules
 00000000  68 00000159 R		PUSH	OFFSET programRules3
 00000005  68 00000110 R		PUSH	OFFSET programRules2
 0000000A  68 00000102 R		PUSH	OFFSET programRules1
 0000000F  68 000000E7 R		PUSH	OFFSET introprogram2
 00000014  68 0000008C R		PUSH	OFFSET introProgram1
 00000019  E8 0000004A			CALL	introduction

 0000001E  B9 0000000A			MOV		ECX, NUMINTS
 00000023			_mainLoop:
 00000023  68 00000281 R		PUSH	OFFSET integerCount
 00000028  68 00000000 R		PUSH	OFFSET signedArray
 0000002D  68 000001F2 R		PUSH	OFFSET errorPrompt
 00000032  68 000001EE R		PUSH	OFFSET userInputNumeric
 00000037  68 0000027D R		PUSH	OFFSET isNegative
 0000003C  68 00000279 R		PUSH	OFFSET stringLen
 00000041  68 00000028 R		PUSH	OFFSET userInputString
 00000046  68 000001CF R		PUSH	OFFSET userInputPrompt
 0000004B  E8 00000069			CALL	readVal

 00000050  E8 0000016F			CALL	writeVal

 00000055  E2 CC			LOOP	_mainLoop

 00000057			_sayGoodbye:
					; says farewell to the user
 00000057  68 0000024B R		PUSH	OFFSET farewell						
 0000005C  E8 00000164			CALL	goodbye								

					Invoke ExitProcess,0	; exit to operating system
 00000061  6A 00	   *	    push   +000000000h
 00000063  E8 00000000 E   *	    call   ExitProcess
 00000068			main ENDP

				;-----------------------------------------------------------------------------------------------
				; Name: introduction
				;
				; Takes multiple string inputs, then prints those strings to introduce the program and the programmer 
				;	to the user and displays the rules of the program to the user.
				;
				; Preconditions: NUMINTS must be declared. Irvine32 lib must be included.
				;
				; Receives:
				;				
				;				[EBP + 24]			= programRules3 passed by reference
				;				[EBP + 20]			= programRules2 passed by reference
				;				[EBP + 16]			= programRules1 passed by reference
				;				[EBP + 12]			= introProgram2 passed by reference
				;				[EBP + 8]			= introProgram1 passed by reference
				;-----------------------------------------------------------------------------------------------

 00000068			introduction PROC
 00000068  55				PUSH	EBP
 00000069  8B EC			MOV		EBP, ESP
 0000006B  52				PUSH	EDX
 0000006C  50				PUSH	EAX

					;print introProgram1 and introProgram2
 0000006D  8B 55 08			MOV		EDX, [EBP + 8]
 00000070  E8 00000000 E		CALL	writeString
 00000075  E8 00000000 E		CALL	CrLf
 0000007A  8B 55 0C			MOV		EDX, [EBP + 12]
 0000007D  E8 00000000 E		CALL	writeString
 00000082  E8 00000000 E		CALL	crLf
					
					;print programRules1 and number of desired ints
 00000087  8B 55 10			MOV		EDX, [EBP + 16]						
 0000008A  E8 00000000 E		CALL	writeString
 0000008F  B8 0000000A			MOV		EAX, NUMINTS
 00000094  E8 00000000 E		CALL	writeDec


					;print programRules2
 00000099  8B 55 14			MOV		EDX, [EBP + 20]
 0000009C  E8 00000000 E		CALL	writeString
 000000A1  E8 00000000 E		CALL	CrLF

					;print programRules3
 000000A6  8B 55 18			MOV		EDX, [EBP + 24]
 000000A9  E8 00000000 E		CALL	writeString
 000000AE  E8 00000000 E		CALL	CrLF

					; restore stack
 000000B3  5A				POP		EDX
 000000B4  58				POP		EAX
 000000B5  5D				POP		EBP
 000000B6  C2 0014			RET		20
 000000B9			introduction ENDP

				;-----------------------------------------------------------------------------------------------
				; Name: readVal
				;
				; Calls mGetString macro with three arguments to prompt user and get a signed 32 bit integer. Once 32bit int
				;	is acquired from user, it is saved as a string of numerical digits, converted from ASCII to SDWORD, then
				;	the input is validated as a number (no symbols or letters outside of + or -) that is correctly sized 
				;	for signed 32bit. Once it is validated, it is stored in signedArray.
				;
				; Preconditions: Irvine32 must be included, registerUpperLimit and registerLowerLimit must be declared, 8 DWORD length
				;					arguments must be passed via the stack.
				;
				; Postconditions: Values of userInputString, stringLen, signedArray, and integerCount are changed.
				;
				; Receives:
				;				[EBP + 36]			= integerCount
				;				[EBP + 32]			= signedArray
				;				[EBP + 28]			= errorPrompt
				;				[EBP + 24]			= userInputNumeric
				;				[EBP + 20]			= isNegative
				;				[EBP + 16]			= stringLen
				;				[EBP + 12]			= userInputString
				;				[EBP + 8]			= userInputPrompt
				;
				; Returns: None	
				;-----------------------------------------------------------------------------------------------

 000000B9			readVal PROC
 000000B9  55				PUSH	EBP
 000000BA  8B EC			MOV		EBP, ESP
 000000BC  60				PUSHAD

 000000BD			_getString:
					; invoke get string and get user input
					mGetString [EBP + 8], [EBP + 12], [EBP + 16]
 000000BD  60		     1		PUSHAD
 000000BE  8B 55 08	     1		MOV		EDX, [EBP + 8]
 000000C1  E8 00000000 E     1		CALL	writeString
 000000C6  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000000C9  B9 00000064	     1		MOV		ECX, MAXSIZE
 000000CE  E8 00000000 E     1		CALL	readString
 000000D3  8B 7D 10	     1		MOV		EDI, [EBP + 16]
 000000D6  89 07	     1		MOV		[EDI], EAX
 000000D8  61		     1		POPAD

					; check if user entered anything
 000000D9  FC				CLD	
 000000DA  8B 4D 10			MOV		ECX, [EBP + 16]					; stringLen into ECX
 000000DD  BB 00000000			MOV		EBX, 0
 000000E2  39 19			CMP		[ECX], EBX
 000000E4  0F 84 00000098		JE		_error							; means the user provided no input

					; check if a sign was entered
 000000EA  8B 75 0C			MOV		ESI, [EBP + 12]					; move string of numerical digits into ESI
 000000ED  AC				LODSB
 000000EE  3C 2B			CMP		AL, 43							; check for plus sign
 000000F0  74 1D			JE		_leadingPlusSign
 000000F2  3C 2D			CMP		AL, 45							; check for minus sign
 000000F4  74 05			JE		_setNegative
 000000F6  8B 75 0C			MOV		ESI, [EBP + 12]					; reset ESI because there is no sign in front of the string
 000000F9  EB 1E			JMP		_loopSetup
					

 000000FB			_setNegative:
					; sets isNegative flag and sets up loop
 000000FB  8B 55 14			MOV		EDX, [EBP + 20]
 000000FE  BB 00000001			MOV		EBX, 1							
 00000103  89 1A			MOV		[EDX], EBX						; set isNegative to 1
 00000105  8B 39			MOV		EDI, [ECX]
 00000107  4F				DEC		EDI								; decrease loop counter so stringLen does not count the sign
 00000108  8B CF			MOV		ECX, EDI
 0000010A  8B 5D 18			MOV		EBX, [EBP + 24]					; move userInputNumeric to EBX to store value once converted
 0000010D  EB 11			JMP		_convertToNumLoop

 0000010F			_leadingPlusSign:
					; handles where a + sign was put in front of the input
 0000010F  8B 39			MOV		EDI, [ECX]
 00000111  4F				DEC		EDI
 00000112  8B CF			MOV		ECX, EDI						; decrease loop counter so stringLen does not count the sign
 00000114  8B 5D 18			MOV		EBX, [EBP + 24]					; move userInputNumeric to EBX to store value once converted
 00000117  EB 07			JMP		_convertToNumLoop

 00000119			_loopSetup:
					; sets up userInputNumeric and loop counter
 00000119  8B 5D 18			MOV		EBX, [EBP + 24]
 0000011C  8B 39			MOV		EDI, [ECX]
 0000011E  8B CF			MOV		ECX, EDI

 00000120			_convertToNumLoop:
					; converts string inputs to numeric
 00000120  51				PUSH	ECX								; store loop count
 00000121  AC				LODSB									; puts first digit in AL

					; check if input is between 0 and 9
 00000122  3C 30			CMP		AL, 48
 00000124  72 5C			JB		_error
 00000126  3C 39			CMP		AL, 57
 00000128  77 58			JA		_error

					; use numInt = 10*numInt + (numChar - 48) to convert ACSII to numbers
 0000012A  F8				CLC
 0000012B  0F B6 F8			MOVZX	EDI, AL							; copy value of AL to EDI and zero extend = numChar
 0000012E  8B 03			MOV		EAX, [EBX]						; numInt
 00000130  B9 0000000A			MOV		ECX, 10
 00000135  BA 00000000			MOV		EDX, 0
 0000013A  F7 E1			MUL		ECX								; multiply by 10
 0000013C  59				POP		ECX								; restore loop counter
 0000013D  83 FA 00			CMP		EDX, 0							
 00000140  75 40			JNZ		_error							; check if overflow and bigger than 32 bit signed
 00000142  83 EF 30			SUB		EDI, 48							; (numChar-48) 
 00000145  03 C7			ADD		EAX, EDI
 00000147  72 39			JC		_error							; if carry is set, then the addition caused it to exceed max value
 00000149  89 03			MOV		[EBX], EAX						; set numInt to new value
 0000014B  3D 7FFFFFFF			CMP		EAX, registerUpperLimit			; check if larger than > 2147483647	
 00000150  77 04			JA		_edgeCase						; check if it's an edge case
 00000152  E2 CC			LOOP	_convertToNumLoop
 00000154  EB 13			JMP		_checkNegative

 00000156			_edgeCase:
					; handle edge case where value is 2147483647 or -2147483648	
 00000156  8B 4D 14			MOV		ECX, [EBP + 20]
 00000159  8B 11			MOV		EDX, [ECX]
 0000015B  83 FA 00			CMP		EDX, 0
 0000015E  74 22			JE		_error							; if positive and > upperLimit, then error
 00000160  3D 80000000			CMP		EAX, registerLowerLimit
 00000165  7E 0C			JLE		_isNegative						; check for edge case of exactly -2147483648
 00000167  EB 19			JMP		_error
					

 00000169			_checkNegative:
					; checks if the value needs to be converted back to negative
 00000169  8B 45 14			MOV		EAX, [EBP + 20]
 0000016C  8B 10			MOV		EDX, [EAX]
 0000016E  83 FA 01			CMP		EDX, 1							; if positive, skip to addToArray
 00000171  75 2B			JNE		_addToArray

 00000173			_isNegative:
					; sets 
 00000173  8B 03			MOV		EAX, [EBX]
 00000175  F7 D8			NEG		EAX
 00000177  3D 80000000			CMP		EAX, registerLowerLimit
 0000017C  7C 04			JL		_error
 0000017E  89 03			MOV		[EBX], EAX
 00000180  EB 1C			JMP		_addToArray

 00000182			_error:
 00000182  8B 55 1C			MOV		EDX, [EBP + 28]					; write error message
 00000185  E8 00000000 E		CALL	writeString
 0000018A  8B 55 14			MOV		EDX, [EBP + 20]
 0000018D  BB 00000000			MOV		EBX, 0
 00000192  89 1A			MOV		[EDX], EBX						; reset value of isNegative
 00000194  8B 55 18			MOV		EDX, [EBP + 24]
 00000197  89 1A			MOV		[EDX], EBX						; reset value of userInputNumeric
 00000199  E9 FFFFFF1F			JMP		_getString						; reprompt user
					
 0000019E			_addToArray:
 0000019E  8B 45 24			MOV		EAX, [EBP + 36]
 000001A1  8B 08			MOV		ECX, [EAX]
 000001A3  8B 75 20			MOV		ESI, [EBP + 32]
 000001A6  8B 13			MOV		EDX, [EBX]
 000001A8  89 14 0E			MOV		[ESI + ECX], EDX
 000001AB  83 C1 04			ADD		ECX, 4
 000001AE  89 08			MOV		[EAX], ECX

 000001B0			_restoreStack:							
 000001B0  8B 55 14			MOV		EDX, [EBP + 20]
 000001B3  BB 00000000			MOV		EBX, 0
 000001B8  89 1A			MOV		[EDX], EBX						; reset value of isNegative
 000001BA  8B 55 18			MOV		EDX, [EBP + 24]
 000001BD  89 1A			MOV		[EDX], EBX						; reset value of userInputNumeric
 000001BF  61				POPAD
 000001C0  5D				POP		EBP
 000001C1  C2 0020			RET		32
 000001C4			readVal ENDP

				;-----------------------------------------------------------------------------------------------
				; Name: writeVal
				;
				;
				; Preconditions: 
				;
				; Postconditions: 
				;
				; Receives:
				;				[EBP + 20]			=
				;				[EBP + 16]			= stringLen
				;				[EBP + 12]			= userInputString
				;				[EBP + 8]			= userInputPrompt
				;
				; Returns: None	
				;-----------------------------------------------------------------------------------------------

 000001C4			writeVal PROC

 000001C4  C3			RET
 000001C5			writeVal ENDP

				;-----------------------------------------------------------------------------------------------
				; Name: goodbye
				;
				; Takes a string, then says goodbye and thank you to the user.
				;
				; Preconditions: Irvine32 must be included.
				;
				; Receives:
				;
				;				[EBP + 8]			= goodbye string passed by reference
				;
				;-----------------------------------------------------------------------------------------------
 000001C5			goodbye PROC
 000001C5  55				PUSH	EBP
 000001C6  8B EC			MOV		EBP, ESP

					; print goodbye
 000001C8  E8 00000000 E		CALL	crLF
 000001CD  52				PUSH	EDX
 000001CE  8B 55 08			MOV		EDX, [EBP + 8]
 000001D1  E8 00000000 E		CALL	writeString
					
 000001D6  5A				POP		EDX
 000001D7  5D				POP		EBP	
 000001D8  C2 0004			RET		4
 000001DB			goodbye ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    11/25/21 12:46:58
<CS271 Project 6: Low level I/O and macros     (Proj6_Brogdo  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000285 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
goodbye  . . . . . . . . . . . .	P Near	 000001C5 _TEXT	Length= 00000016 Public STDCALL
introduction . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 00000051 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public STDCALL
  _mainLoop  . . . . . . . . . .	L Near	 00000023 _TEXT	
  _sayGoodbye  . . . . . . . . .	L Near	 00000057 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 000000B9 _TEXT	Length= 0000010B Public STDCALL
  _getString . . . . . . . . . .	L Near	 000000BD _TEXT	
  _setNegative . . . . . . . . .	L Near	 000000FB _TEXT	
  _leadingPlusSign . . . . . . .	L Near	 0000010F _TEXT	
  _loopSetup . . . . . . . . . .	L Near	 00000119 _TEXT	
  _convertToNumLoop  . . . . . .	L Near	 00000120 _TEXT	
  _edgeCase  . . . . . . . . . .	L Near	 00000156 _TEXT	
  _checkNegative . . . . . . . .	L Near	 00000169 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000173 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000182 _TEXT	
  _addToArray  . . . . . . . . .	L Near	 0000019E _TEXT	
  _restoreStack  . . . . . . . .	L Near	 000001B0 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 000001C4 _TEXT	Length= 00000001 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMINTS  . . . . . . . . . . . .	Number	 0000000Ah   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorPrompt  . . . . . . . . . .	Byte	 000001F2 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 0000024B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
integerCount . . . . . . . . . .	DWord	 00000281 _DATA	
introProgram1  . . . . . . . . .	Byte	 0000008C _DATA	
introProgram2  . . . . . . . . .	Byte	 000000E7 _DATA	
isNegative . . . . . . . . . . .	DWord	 0000027D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
programRules1  . . . . . . . . .	Byte	 00000102 _DATA	
programRules2  . . . . . . . . .	Byte	 00000110 _DATA	
programRules3  . . . . . . . . .	Byte	 00000159 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
registerLowerLimit . . . . . . .	Number	 -80000000h   
registerUpperLimit . . . . . . .	Number	 7FFFFFFFh   
signedArray  . . . . . . . . . .	DWord	 00000000 _DATA	
stringLen  . . . . . . . . . . .	DWord	 00000279 _DATA	
userInputNumeric . . . . . . . .	DWord	 000001EE _DATA	
userInputPrompt  . . . . . . . .	Byte	 000001CF _DATA	
userInputString  . . . . . . . .	Byte	 00000028 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
